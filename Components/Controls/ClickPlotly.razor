@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib

@using System.Timers

<PlotlyChart style="height: 60vh; min-height: 350px"
@bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart"
ClickAction="ClickAction" AfterRender="SubscribeEvents" />

@if (ClickInfos != null && ClickInfos.Any())
{
    <MudText>Current X: @ClickInfos.First().X</MudText>
    <MudText>Current Y: @ClickInfos.FirstOrDefault(d => d.TraceIndex == 0)?.Y</MudText>
    <MudText>Current Y2: @ClickInfos.FirstOrDefault(d => d.TraceIndex == 1)?.Y</MudText>
}

<MudText>CurrentCount = @_currentCount</MudText>

@code
{
    public MudTheme Theme { get; set; } = new()
        {
            PaletteLight = new()
            {
                Black = "#272c34ff",
                Primary = "#0078d7",
                Secondary = "#FEB16B",
                Success = "#A4D266",
                Warning = "#FEB16B",
                Dark = "#303030",
                Info = "#4889CD",
                Error = "#EA4F52",
                Surface = "#f0f0f0",
                Background = "#f0f0f0",
                BackgroundGray = "#f5f5f5ff",
                DrawerBackground = "#f0f0f0",
                DrawerText = "#424242ff",
                DrawerIcon = "#616161ff",
                AppbarBackground = "#0078d7",
                AppbarText = "#ffffffff",
                TextPrimary = "#424242ff",
                TextSecondary = "#00000089",
                ActionDefault = "#00000089",
                ActionDisabled = "#00000042",
                ActionDisabledBackground = "#0000001e",
                Divider = "#e0e0e0ff",
                DividerLight = "#000000cc",
                TableLines = "#e0e0e0ff",
                LinesDefault = "#0000001e",
                LinesInputs = "#bdbdbdff",
                TextDisabled = "#00000060"
            },
            PaletteDark = new()
            {
                Black = "#000000",
                Primary = "#54A68F",
                Secondary = "#FEB16B",
                Success = "#A4D266",
                Warning = "#FEB16B",
                Dark = "#303030",
                Info = "#4889CD",
                Error = "#EA4F52",
                Surface = "#303030",
                Background = "#212121",
                BackgroundGray = "#303030",
                DrawerBackground = "#303030",
                DrawerText = "#FFFFFF",
                DrawerIcon = "#FFFFFF",
                AppbarBackground = "#303030",
                AppbarText = "#FFFFFF",
                TextPrimary = "#FFFFFF",
                TextSecondary = "#FFFFFF",
                ActionDefault = "#adadb1",
                ActionDisabled = "rgba(255,255,255, 0.26)",
                ActionDisabledBackground = "rgba(255,255,255, 0.12)",
                Divider = "rgba(255,255,255, 0.12)",
                DividerLight = "rgba(255,255,255, 0.06)",
                TableLines = "rgba(255,255,255, 0.12)",
                LinesDefault = "rgba(255,255,255, 0.12)",
                LinesInputs = "rgba(255,255,255, 0.3)",
                TextDisabled = "rgba(255,255,255, 0.2)"
            },
            Typography = new()
            {
                Default = new DefaultTypography
                {
                    FontSize = "1em"
                },
                Body1 = new Body1Typography
                {
                    FontSize = "1em"
                },
                Body2 = new Body2Typography
                {
                    FontSize = ".83em"
                },
                Caption = new CaptionTypography
                {
                    FontSize = "1.12em",
                    FontWeight = "550"
                },
                Overline = new OverlineTypography
                {
                    FontSize = "1.12em",
                    FontWeight = "550"
                },
                H1 = new H1Typography
                {
                    FontSize = "2em",
                    FontWeight = "700"
                },
                H2 = new H2Typography
                {
                    FontSize = "1.5em",
                    FontWeight = "650"
                },
                H3 = new H3Typography
                {
                    FontSize = "1.17em",
                    FontWeight = "600"
                },
                H4 = new H4Typography
                {
                    FontSize = "1.12em",
                    FontWeight = "550"
                },
                H5 = new H5Typography
                {
                    FontSize = ".83em",
                    FontWeight = "500"
                },
                H6 = new H6Typography
                {
                    FontSize = ".75em",
                    FontWeight = "450"
                },
                Subtitle1 = new Subtitle1Typography
                {
                    FontSize = "3em",
                    FontWeight = "650"
                },
                Subtitle2 = new Subtitle2Typography
                {
                    FontSize = "1.17em",
                    FontWeight = "600"
                }
            }
        };

    private PlotlyChart chart;
    private Config config;
    private Layout layout = new Layout();
    private IList<ITrace> data;
    private IEnumerable<EventDataPoint> ClickInfos { get; set; }
    private IList<object> ThrottlePos { get; set; }
    private IList<object> timeStamps { get; set; }

    private System.Timers.Timer timer;
    private int _currentCount = 0;




    /// <inheritdoc />
    protected override void OnInitialized()
    {
        config = new Config
            {
                Responsive = true
            };

        layout = new Layout
            {
                Title = new Title
                {
                    Text = GetType().Name
                },
                PaperBgColor = Theme.PaletteDark.Surface.ToString(),
                PlotBgColor = Theme.PaletteDark.Surface.ToString(),
                Font = new Font
                {
                    Color = Theme.PaletteDark.TextPrimary.ToString()
                },
                HoverMode = HoverModeEnum.XUnified
            };


        data = new List<ITrace>
        {
            new Scatter
            {
                Name = "Line Trace",
                Mode = ModeFlag.Lines,
                X = timeStamps,
                Y = ThrottlePos,
                Line = new Line
                {
                    Color = "blue",
                    Width = 1,
                    Shape = Plotly.Blazor.Traces.ScatterLib.LineLib.ShapeEnum.Spline, // must set shape to spline for smoothing to work
                    Smoothing = (decimal)1
                }
            },
            new Scatter
            {
                Name = "ScatterTrace 2",
                Mode = ModeFlag.Markers,
                X = Enumerable.Range(0, 30).Cast<object>().ToList(),
                Y = Helper.GenerateData(0, 30).Y
            }
        };

        timer = new();
        timer.Interval = 1000;
        timer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
        {
            _currentCount++;
            await InvokeAsync(StateHasChanged);
        };
        timer.Elapsed += AddData;
        timer.Enabled = true;

        base.OnInitialized();
    }

    public void ClickAction(IEnumerable<EventDataPoint> eventData)
    {
        ClickInfos = eventData;
        StateHasChanged();
    }

    public async void SubscribeEvents()
    {
        await chart.SubscribeClickEvent();
    }

    public async void AddData(object? sender, ElapsedEventArgs e)
    {
        
    }

}